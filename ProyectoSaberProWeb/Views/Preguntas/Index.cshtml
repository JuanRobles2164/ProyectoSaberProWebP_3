@model ProyectoSaberProWeb.Models.ViewModels.PreguntaViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutDocente.cshtml";
}

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h4 class="m-0 font-weight-bold text-primary">Preguntas</h4>
    </div>
    <div class="card-body">
        <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
            <div class="row">
                <div class="col-sm-12 col-md-6">
                    <div class="dataTables_length" id="dataTable_length">
                        <a href="#" data-toggle="modal" data-target="#createModal" class="btn btn-success btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-plus"></i>
                            </span>
                            <span class="text"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Crear nuevo</font></font></span>
                        </a>
                    </div>
                </div>
            </div>
            <label></label>
            <table class="table table-responsive-lg table-borderless" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.PreguntaCreacion.Descripcion)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PreguntaCreacion.TipoPregunta)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PreguntaCreacion.PreguntaPeso)
                        </th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ListaPreguntas)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Descripcion)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TipoPregunta)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PreguntaPeso)
                            </td>
                            <td>
                                <a href="@Url.Action("Edit", new { id = item.ID })">
                                    <i class="fas fa-pencil-alt">
                                    </i>
                                </a>
                                &nbsp;&nbsp;
                                <a href="@Url.Action("Details", new { id = item.ID })">
                                    <i class="fas fa-search-plus">
                                    </i>
                                </a>
                                &nbsp;&nbsp;
                                <a href="@Url.Action("Delete", new { id = item.ID })">
                                    <i class="fas fa-trash-alt">
                                    </i>
                                </a>
                                &nbsp;&nbsp;<!--setIdPregunta(item.ID)-->
                                <a href="#" onclick="CoV(@item.ID, @item.PruebaId)" data-toggle="modal">
                                    <i class="fas fa-align-center">
                                    </i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div>
    <div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            @using (Html.BeginForm("Create", "Preguntas", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Crear Pregunta</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.PreguntaCreacion.Descripcion, htmlAttributes: new { @class = "control-label" })
                                @Html.TextAreaFor(model => model.PreguntaCreacion.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.Descripcion, "", new { @class = "text-danger" })
                            </div>

                        <div class="form-group row">
                            <div class="col-sm-6 mb-3 mb-sm-0">
                                @Html.LabelFor(model => model.PreguntaCreacion.TipoPregunta, htmlAttributes: new { @class = "control-label" })
                                @Html.EnumDropDownListFor(model => model.PreguntaCreacion.TipoPregunta, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.TipoPregunta, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6">
                                @Html.LabelFor(model => model.PreguntaCreacion.PreguntaPeso, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.PreguntaCreacion.PreguntaPeso, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.PreguntaPeso, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-8 mb-3 mb-sm-0">
                                @Html.LabelFor(model => model.PreguntaCreacion.PruebaId, "Prueba", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.PreguntaCreacion.PruebaId, Model.ListaPruebas, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.PruebaId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-4">
                                @Html.LabelFor(model => model.PreguntaCreacion.CompentenciaId, "Competencia", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.PreguntaCreacion.CompentenciaId, Model.ListaCompetencias, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.CompentenciaId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-6 mb-3 mb-sm-0">
                                @Html.LabelFor(model => model.PreguntaCreacion.ContextoId, "Contexto", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.PreguntaCreacion.ContextoId, Model.ListaContextos, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PreguntaCreacion.ContextoId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="submit" class="btn btn-primary">Crear</button>
                    </div>
                   
                </div>
            }
        </div>
    </div>
</div>

<div>
    <div class="modal fade" id="createOptionsModal" tabindex="-1" role="dialog" aria-labelledby="createOptionsModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalScrollableTitle">Crear opciones</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Html.BeginForm("Create", "Opciones", FormMethod.Post))
                {
            <div class="modal-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.OpcionA.PreguntaId)
                <div class="form-group">
                    @Html.LabelFor(model => model.OpcionA.Descripcion, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OpcionA.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OpcionA.Descripcion, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OpcionA.Correcta, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.OpcionA.Correcta, "true")
                            @Html.ValidationMessageFor(model => model.OpcionA.Correcta, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.OpcionB.Descripcion, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OpcionB.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OpcionB.Descripcion, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OpcionB.Correcta, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.OpcionB.Correcta, "true")
                            @Html.ValidationMessageFor(model => model.OpcionB.Correcta, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpcionC.Descripcion, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.OpcionC.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OpcionC.Descripcion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpcionC.Correcta, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.OpcionC.Correcta, "true")
                                @Html.ValidationMessageFor(model => model.OpcionC.Correcta, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpcionD.Descripcion, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.OpcionD.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OpcionD.Descripcion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpcionD.Correcta, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.OpcionD.Correcta, "true")
                                @Html.ValidationMessageFor(model => model.OpcionD.Correcta, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="submit" class="btn btn-primary">Guardar cambios</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="detailsOptionsModal" tabindex="-1" role="dialog" aria-labelledby="detailsOptionsModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalScrollableTitle">Opciones de respuesta</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.OpcionA.Descripcion)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OpcionB.Descripcion)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OpcionC.Descripcion)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OpcionD.Descripcion)
                    </th>
                    <th>Acciones</th>
                </tr>

                <tr id="trDetalles">
                    
                </tr>

            </table>
            <br />
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
            
        </div>
    </div>
</div>

<style>
    .fa-pencil-alt {
        color: #EFD30B;
    }

        .fa-pencil-alt:hover {
            color: #D3B70B;
        }

    .fa-trash-alt {
        color: #DE0E0E;
    }

        .fa-trash-alt:hover {
            color: #A00C0C;
        }

    .icono-caucho {
        font-size: 20px;
    }
</style>

 
<script type="text/javascript">
    function setIdPregunta(idPregunta) {
        $('#OpcionA_PreguntaId').val(idPregunta);
    }
    function getIdPregunta(PreguntaId) {
        console.log("Pregunta: " + PreguntaId);
        $.ajax({
            url: '@Url.Action("getOpciones", "Preguntas")',
            type: 'GET',
            async: true,
            data: { 'PreguntaId': PreguntaId },
            success: function (response) {
                console.log(response);
                $('#createOptionsModal').modal('show');
                $('#detailsOptionsModal').modal('hide');
            },
            error: function (response) {
                alert('Error inesperado, comuniquese con el desarrollador');
                console.log(response);
            }
        });
    }
    function CoV(idPregunta, idPrueba) {
        $.ajax({
            url: '@Url.Action("getOpcionesNT", "Preguntas")',
            type: 'GET',
            async: true,
            data: {'PreguntaId': idPregunta},
            success: function (response) {
                
                if (response > 0) {
                    const OpcionA = document.getElementById('OpcionA_PreguntaId')
                    OpcionA.value = response;
                    $('#createOptionsModal').modal('show');
                    console.log("true "+response);
                    $('#detailsOptionsModal').modal('hide');
                } else {
                    console.log("false "+response);
                    getIdPregunta(response);
                }
            },
            error: function (response) {
                console.log("Error "+response);
            }
        });
    }

    </script>